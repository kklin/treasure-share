import base58
import hashlib
import binascii
from hashlib import sha256
from ecdsa2 import SigningKey, SECP256k1
from ecdsa2.util import sigencode_der
import os

# from hdwallet.curves import *
from hdwallet import HDWallet 

def make_key(seed):
  return HDWallet.from_master_seed(seed)

def make_keys(n):
	#keys = {}
	keys = []
	for _ in range(n):
		seed = os.urandom(256/8)
		#seed = test_seeds[_]
		key = make_key(seed)
		#key_address = key.address()
		#keys[key_address] = key
		keys.append(key)
	return keys

def get_child(key, n):
  return key.child(n)

def get_private_key(key):
  return key.to_extended_key(include_prv=key.prvkey())

def get_public_key(key):
  return key.to_extended_key()

def bitcoin_sign(privkey, sighash):
    """Create a signature using the provided private key and signature hash.
    Both parameters should be hex strings, and the return result is also a
    hex string.

    The private key would be generated by something like:
    binascii.b2a_hex(make_key(seed).child(n).prvkey())"""

    secret = binascii.a2b_hex(privkey)
    key = SigningKey.from_string(secret, SECP256k1)
    sig = key.sign_digest_deterministic(
        binascii.a2b_hex(sighash), sha256, sigencode_der)
    return binascii.b2a_hex(sig)

def sign_addresses(keys, required_sigs):
	signatures = []
	for required_sig in required_sigs:
		address = required_sig['address']
		sighash = required_sig['sighash']
		level = required_sig['level']
		key = keys[address]		
		private_key = binascii.b2a_hex(key.child(level).prvkey())
		signatures.append(key_funcs.bitcoin_sign(private_key, sighash))
	return signatures

def key_from_private_key(privkey):
	return HDWallet.from_extended_key(privkey)

def main():

  # --- test vector 1
  seed = '000102030405060708090a0b0c0d0e0f'
  seq = [0x80000000, 1, 0x80000002, 2, 1000000000]
  key = make_key(seed)
  child = key.child(4) # This number comes from Coinbase
  print("public key: " + get_public_key(key))
  print("private key: " + get_private_key(key))
  print("public key: " + get_public_key(child))
  print("private key: " + get_private_key(child))

if __name__ == "__main__":
  main()
